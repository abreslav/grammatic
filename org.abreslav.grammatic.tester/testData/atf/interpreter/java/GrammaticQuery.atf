#import 
  'string.module'{string},
  'boolean.module'{x}, 	
  'grammatic.typesystem'{some};

#import org.abreslav.grammatic.grammar.Expression;
#import org.abreslav.grammatic.grammar.Iteration;
#import org.abreslav.grammatic.grammar.Sequence;
#import org.abreslav.grammatic.grammar.Alternative;
#import org.abreslav.grammatic.metadata.Value;
#import org.abreslav.grammatic.query.AttributeQuery;
#import org.abreslav.grammatic.query.AttributeTypeOptions;
#import org.abreslav.grammatic.query.ExpressionQuery;
#import org.abreslav.grammatic.query.IterationQuery;
#import org.abreslav.grammatic.query.MetadataQuery;
#import org.abreslav.grammatic.query.ProductionQuery;
#import org.abreslav.grammatic.query.RuleQuery;
#import org.abreslav.grammatic.query.SymbolQuery;
#import org.abreslav.grammatic.query.SequenceQuery;
#import org.abreslav.grammatic.query.AlternativeQuery;
#import org.abreslav.grammatic.query.QueryContainer;
#import org.abreslav.grammatic.parser.util.ListBuilder;

#javaoptions {
	grammarName = 'GrammaticQuery';
	grammarPackage = 'org.abreslav.grammatic.grammar1';
}

ruleQueryContainer
	: symbolQueryWithVar productionQuery* ';'
	;
# --> (QueryContainer<RuleQuery> result) {
	RuleQuery query;
	#before: query = createRuleQuery();
	symbolQueryWithVar:: #(query);
	productionQuery:: #(query);
	#after: result = createQueryContainer(query);
}
		
symbolQueryWithVar
	: variablePrefix? anonymousSymbolQuery
	: namedSymbolQuery
	;
# (RuleQuery query) {
	#before: varName = string.null();
	variablePrefix: varName = variablePrefix#;
	anonymousSymbolQuery: anonymousLeftSide(query, varName, anonymousSymbolQuery#); 
	namedSymbolQuery: namedLeftSide(query, namedSymbolQuery#);
}
	
variablePrefix
	: $d='$' NAME? '='
	;
# --> (String result) {
	#before: result = #text(d);
	NAME: result = NAME#;
}

symbolReferenceQuery
	: anonymousSymbolQuery
	: namedSymbolQuery
	;
# --> (ExpressionQuery result) {
	anonymousSymbolQuery: result = createSymbolReferenceQuery(anonymousSymbolQuery#);
	namedSymbolQuery: result = addSymbolQueryVariable(namedSymbolQuery#);
}
		
anonymousSymbolQuery
	: '#'
	: '@' queryMetadata '@'
	;
# --> (SymbolQuery result) {
	#before: result = createSymbolQuery();
	queryMetadata:: #(result);
}
	
namedSymbolQuery
	: NAME
	;
# --> (SymbolQuery result) {
	NAME: result = createNamedQuery(NAME#);
}
		
productionQuery 
	: $pV=variablePrefix? (':' | '|:') alternativeQuery
	: ':' $wV=variablePrefix? '{...}'
	;
# (RuleQuery query) {
	#before: productionVariable = string.null();
	pV: productionVariable = pV#;
	alternativeQuery: addProduction(query, productionVariable, alternativeQuery#);
	wV: setWildcardVariable(query, wV#);
	'|:',  
	'{...}': setOpen(query);
}
	
expressionQuery
	: alternativeQuery ';'
	;
# --> (ExpressionQuery result) {
	alternativeQuery:: result = #();
}
	
alternativeQuery
	: sequenceQuery ('|' (sequenceQuery | (variablePrefix? '...')))*
	;
# --> (ExpressionQuery result) {
	ListBuilder<ExpressionQuery, AlternativeQuery> builder;
	#before: {
		builder = createListBuilder();
		open = Boolean.false();
		variablePrefix = string.null();
	}
	sequenceQuery: addItem(builder, sequenceQuery#);
	'...': open = Boolean.true();
	variablePrefix:: variablePrefix = #();
	#after: result = getResult(builder, open, variablePrefix);
}

sequenceQuery
	: iterationQuery+
	;
# --> (ExpressionQuery result) {
	ListBuilder<ExpressionQuery, SequenceQuery> builder;
	#before: builder = createListBuilder();
	iterationQuery: addItem(builder, iterationQuery#);
	#after: result = getResult(builder);
}
	
iterationQuery
	: varOrAtom (queryMetadata)? operation
	: variablePrefix? '..'
	;
# --> (ExpressionQuery result) {
	queryMetadata:: #(varOrAtom#);
	operation:: op = operation();
	operation: result = assembleIterationQuery(varOrAtom#, op);
	#before: variablePrefix = null();
	variablePrefix:: variablePrefix = #();
	'..': result = createSequeceWildcard(variablePrefix); 
}
	
operation 
	: $token=('*' | '+' | '?')
	: $e=#empty
	;
[[
	operation() --> (IterationQuery result) {
		token: result = createIteration(#text(token));
		e: result = null();
	}
	lexicalOperation() --> (Iteration result) {
		token: result = createIteration(#text(token));
		e: result = null();
	}
]]

varOrAtom
	: atom
	$var=: variablePrefix atom
	;
# --> (ExpressionQuery result) {
	atom:: result = #();
	var: result = createVariableQuery(variablePrefix#, result);
}

atom
	: symbolReferenceQuery
	: '$' NAME
	: '(' alternativeQuery ')'
	: lexicalAtom
	: '#lex'
	: '#empty'
	;
# --> (ExpressionQuery result) {
	symbolReferenceQuery:: result = #();
	NAME: result = createVariableReference(NAME#);
	alternativeQuery:: result = #();
	lexicalAtom: result = createExactQuery(lexicalAtom#);
	'#lex': result = createAnyLexicalQuery();
	'#empty': result = createEmptyQuery();
}
	
queryMetadata 
	: '{' (attributeQuery (';' attributeQuery?)*)? '}'
	;
# (MetadataQuery query) {
	attributeQuery: addAttribute(query, attributeQuery#);
}

attributeQuery 
	: attributeWithValueQuery
	$not=: '!' namespaceUri? NAME
	: namespaceUri? NAME ':' attributeType 
	;		 
# --> (AttributeQuery result) {
	attributeWithValueQuery:: result = #();
	#before: namespaceUri = null();
	namespaceUri:: namespaceUri = #();
	not.after: result = createAbsence(namespaceUri, NAME#);
	attributeType: result = createType(namespaceUri, NAME#, attributeType#);
}

attributeWithValueQuery
	: namespaceUri? NAME ('=' attributeValue)?
	;
# --> (AttributeQuery result) {
	#before: result = createAttributeQuery();
	namespaceUri: setNamespace(result, namespaceUri#);
	NAME: setName(result, NAME#);
	attributeValue: setValue(result, attributeValue#);
}
	
namespaceUri
	: NAME ':'
	;
# --> (String result) {
	NAME: result = NAME#;
}

attributeType
	: '#' NAME
	;
# --> (AttributeTypeOptions result) {
	NAME: result = getOptions(NAME#);
}
////////////////////////////////////////////////
	
lexicalAlternative
	: lexicalSequence ('|' lexicalSequence)*
	;
# --> (Expression result) {
	ListBuilder<Expression, Alternative> builder;
	#before: builder = createListBuilder();
	lexicalSequence: addItem(builder, lexicalSequence#);
	#after: result = getResult(builder);
}

lexicalSequence
	: lexicalIteration+
	;
# --> (Expression result) {
	ListBuilder<Expression, Sequence> builder;
	#before: builder = createListBuilder();
	lexicalIteration: addItem(builder, lexicalIteration#);
	#after: result = getResult(builder);
}
	
lexicalIteration
	: lexicalAtom operation
	;
# --> (Expression result) {
	operation:: lexOp = lexicalOperation(); 
	#after: result = assembleIteration(lexOp, lexicalAtom#);
}
	
lexicalAtom
	: lexicalAtomIndependent
	: '[[' lexicalAlternative ']]'
	;
# --> (Expression result) {
	lexicalAtomIndependent:: result = #();
	lexicalAlternative:: result = #();
}