#import 
  'string.module'{string}, 	
  'grammatic.typesystem'{some};
  
#import org.eclipse.emf.ecore.EObject;
#import org.abreslav.grammatic.metadata.Annotated;
#import org.abreslav.grammatic.metadata.Value;
#import org.abreslav.grammatic.metadata.TupleValue;
#import org.abreslav.grammatic.metadata.Namespace;
#import org.abreslav.grammatic.metadata.PunctuationType;
  
#javaoptions {
	grammarName = 'GrammaticMetadata';
	grammarPackage = 'org.abreslav.grammatic.grammar';
}
  
#module local {
	valueNull() --> (Value null);	
}  

metadata 
	: $s='{' (attribute (';' attribute?)*)? '}'
	;
[[
	metadata(EObject subject) {
		attribute:: attribute(subject);	
	}
	
	attributeList() --> (TupleValue result) {
		#before : result = createTupleValue();
		attribute:: attributeInList(result);
	}
]]

namespace
	: NAME ':'
	;
# --> (Namespace namespace) {
	#after : namespace = createNamespace(NAME#);  
}
	
attribute 
	: namespace? NAME ('=' attributeValue)?
	;
[[
	nsNull() --> (Namespace null);
	attribute(EObject subject) {
		#before : {
			namespace = nsNull();
			attributeValue = local.valueNull();
		}
		namespace:: namespace = #();
		attributeValue : attributeValue = attributeValue#;
		#after : writeAttribute(subject, namespace, NAME#, attributeValue);
	} 
	attributeInList(Annotated subject) {
		#before : {
			namespace = nsNull();
			attributeValue = local.valueNull();
		}
		attributeValue : attributeValue = attributeValue#;
		namespace:: namespace = #();
		#after : addAttribute(subject, namespace, NAME#, attributeValue);
	}
]]			
	
attributeValue
	: character
	: INT
	: STRING
	: NAME
	: metadata
	$t=|: '{{' term* '}}'
//	: '<<' alternative '>>'
	;
# --> (Value result) {
	character : result = createCharacterValue(character#);
	INT : result = createIntValue(INT#);
	STRING : result = createStringValue(string.createString(STRING#));
	NAME : result = createIdValue(NAME#);
	metadata:: result = attributeList();
	t.before : multi = createMultiValue();
	term : addItem(multi, term#);
	t.after : result = multi;
	#before : result = local.valueNull();
//	alternative : result = createExpressionValue(alternative#);
}
	
term 
	:  attributeValue 
	:  punctuation
	;
# --> (Value result) {
	attributeValue:: result = #();
	punctuation : result = createPunctuationValue(punctuation#); 
}
	
punctuation
	: $tokens=..
	;
# --> (PunctuationType result) {
	tokens: result = punctuationType(#text(tokens));
}
