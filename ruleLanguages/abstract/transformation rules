"Productions of form 'a: a' may be deleted"
"We can change lexical form of tokens: 
	e.g. replace STRING with something delimited differently
	we'll need to prove that what's available from the new form
	was allowed by the old form
	=> we need a specification for 'skip' characters in tokens
	e.g. STRING: '"'{skip} .. '"'{skip} 
"  

<a>?{else: <s>} <-> (<a> | #empty {<s>})
<a>*{else: <s>} <-> (<a>+ | #empty {<s>})

// delimiter insertion
--<e> ~ #lex <e> #lex
--<e> ~ <e> #lex
--<e> ~ #lex <e>
#lex{!enumliteral} ~ #empty
!!! problem with enums !!! #lex ~ #lex // even if they are diffferent

// commutativity
// AS: items are just assigned to structural features, which are randomly accessed
!!! order of appending
<e1> <e2> ~ <e2> <e1> 
<a>* <b>* ~=~ (<a> | <b>)* 
<a>? <b>? ~=~ (<a> | <b>)?

// normal commutativity of alternatives and productions
<a> | <b> ~ <b> | <a>
a: <b> : <c> : {...} ~ a: <c> : <a> : {...}

// strengthening bounds
// if something was optional, concrete syntax may require it or throw away
--<a>? ~ <a>
--<a>?{else: <s>} ~ #empty
<a>* ~ <a>
--<a>* ~ <a>+
-- <a>* ~ <a>? // ~ #empty
<a> | <b> ~ <a>
a : <b> : {...} ~ a : <b>
a : <b> : <c> : r={...} ~ a : <b> : r={...}
<e> #empty <e1> ~ <e> <e1> 
"Symbol which is never referenced might be deleted"

// weakening bounds for free
(<a> | <b>)? ~ (<a> | <b>?)?
(<a> | <b>)* ~ (<a> | <b>*)*
(<a> | <b>)* ~ (<a> | <b>+)*
(<a> | <b>)* ~ (<a> | <b>?)*
(<a> | <b>)+ ~ (<a> | <b>+)+
<a>? ~=~ <a>??
<a>* ~=~ <a>**
<a>+ ~=~ <a>++
<a>* ~=~ <a>*?

<a>* ~=~ <a>?* [<a> is not a symbol reference!] //otherwise we break feature multiplicity
<a>* ~=~ <a>+? [<a> is not a symbol reference!]
<a>* ~=~ <a>+* [<a> is not a symbol reference!]

// composition rules
// !!! NOTE: these rules work in both directions
<a>? <b>? ~=~ (<a> <b>)?
<a>* <b>* ~=~ (<a> <b>)*
<a>+ <b>+ ~=~ (<a> <b>)+
<pre> (<a> | <b>) <post> ~=~ (<pre> <a> <post> | <pre> <b> <post)

<a> <a>+ ~=~ <a>+
<a> <a>* ~=~ <a>+

---// decomposition rules
---<a>+ ~ <a> <a>*

// inlining symbols 
a ~ <b> | <c> | ... [a : <b> : <c> : ...] // inlining many productions as an alternative 

// Adding alternatives/productions
<a> ~=~ <a> | <a>
a |: <b> ~=~ a |: <b> |: <b>

// extracting rules
"One may introduce a new rule which rhs is used somewhere"
"If an alternative is a body of a production, it may be turned into many productions"
<e> ~ a [<e> : a]
<e> ~ a{scheme(<e>)} [ stripAnnotations(<e>) : a ]// annotations might be left on a reference 

// weakening bounds with "default" annotation
<a> ~ <a>? {default: <a>}
<a> ~ #empty {default: <a>} 
<a>+ ~ <a>* {default: <a>+} 
<a>+ ~ <a>? {default: <a>}

// replacing symbol references with "lookup" annotation set
a ~ <e> {key in : scope<value: a>}

-------------------------------------------

what we have in abstract syntax:

Symbol references might be annotated with & to denote a cross-reference 

Simplistic inheritance (forbids any reuse of declarations, that's bad) 
a
	: b
	: c
	: d
	;
	
Class definitions
a
	: b c d
	;
here the order is irrelevant
items might be 
  symbol references (pure or arbitrarily iterated)
  literals (only iterated)
  
Enums
a
	: 'b'
	: 'c'
	: 'd'
	;
Only literals allowed
