program
	@program : Program
	: statement{program.statements+=#}*
	;

statement
	@statement : Statement
	: expression{..}
	: defmodule{statement=#}
	: defglobal{..}
	: deftemplate{..}
	;

STRING : '"'{skip} ('\'{skip} '"' | [^ '"'])* '"'{skip};

boolean {instanceType: boolean}
	: TRUE{true}
	: FALSE{false}
	;

defmodule
	@module : Module
	$=: nonVariableSymbol{module.name=#} 
	  STRING{module.comment=#}? 
	  boolean{module.autoFocus=#}?
	;
:: {
	before = '(' 'defmodule'
	after = ')'
	boolean.before = '(' 'auto-focus'
	boolean.after = ')'
}
/* Result
defmodule
	@module : Module
	: '(' 'defmodule' 
		nonVariableSymbol{module.name=#} 
		STRING{module.comment=#}? 
		('(' 'auto-focus' boolean{module.autoFocus=#} ')')?
	;
*/

defglobal
	@global : Global
	: $body=(GLOBAL_VARIABLE{global.name=#} expression{global.value=#})
	;
:: {
	[3.2] inline(defglobal); [7] delete(defglobal)
	statement
		: (@global : Global;
			GLOBAL_VARIABLE{global.name=#} expression{global.value=#}
		  ){statement=#}
		: {...}
		;
	[3.2] inline(statement); [7] delete(statement)
	program
		: (expression | defmodule | deftemplate 
		   | $body=(GLOBAL_VARIABLE expression)){program.statements+=#}*
		;
	[prop. 8] approx, there are some more steps
	/// SOMETHING MUST PREVENT US FROM SKIPPING THIS STEP
	///   Actually it is assigning the same variable twice (the variable is omitted here)
	/// DOUBTS IF THIS COULD BE DONE AUTOMATICALLY
	///   And we would like to hide most annotations from the user 
	program
		: (expression{program.statements+=#} | defmodule{program.statements+=#} | deftemplate{program.statements+=#} 
		   | $body=(GLOBAL_VARIABLE expression){program.statements+=#})*
		;
	[prop. 7] $iterated = introduce(+, $body) // it stays in alternative under *
	program
		: (expression | defmodule | deftemplate 
		   | $iterated=((GLOBAL_VARIABLE expression){program.statements+=#}+))*
		;
	[4.1 + ???] $iterated.before = '(' 'defglobal'
	[4.1 + ???] $iterated.after = ')'
	... '(' 'defglobal' (GLOBAL_VARIABLE expression)+ ')'...
	[3.2 + introduce new] ::program: ($statement)*; extract(statement: $statement);
	statement{(program)}
		: expression | defmodule | deftemplate | $iterated=((GLOBAL_VARIABLE expression){program.statements+=#}+)
		;
	[2.2] verticalize(statement)
	statement{(program)}
		: expression 
		: defmodule 
		: deftemplate 
		: $iterated=('(' 'defglobal' (GLOBAL_VARIABLE expression){program.statements+=#}+ ')')
		;
	[3.2 + introduce new] extract(defglobal: $iterated);  	
	statement{(program)}
		: expression 
		: defmodule 
		: deftemplate 
		: defglobal{(program)}
		;
	defglobal{(program)}
		: '(' 'defglobal' 
			(@global : Global;
				GLOBAL_VARIABLE{global.name=#} expression{global.value=#}
			){program.statements+=#}+ ')'
		;
}
 
type
	: 'ANY'{enumliteral} | 'INTEGER'{enumliteral} | 'FLOAT' |
      'NUMBER' | 'SYMBOL' | 'STRING' |
      'LEXEME' | 'OBJECT' | 'LONG'
    ;
 
slotKind
	: 'slot'{enumliteral}
	: 'multislot'{enumliteral}
	;
	
slot
	@slot : Slot;
	$=: slotKind{slot.slotKind=#}
	  nonVariableSymbol{slot.name=#}
	  type{slot.type=#}?{slot.?type=#}
      expression{slot.default=#}?
      expression{slot.defaultDynamic=#}?
      expression{slot.allowedValues+=#}*
    ;
:: {
	[4.1 + ...] before = '('
	[4.1 + ...] after = ')'
	[4.6] convertToPermPart(type)
	... type{slot.?!type=#}+?{slot.?type=#} ...
	[prop. 9] ... type{slot.?!type=#}*{slot.?type=#} ...
	-- " --
	...
	  type{slot.?!type=#}*{slot.?type=#}
      expression{slot.?!default=#}*
      expression{slot.?!defaultDynamic=#}*
      expression{slot.allowedValues+=#}*
    [prop. 4] introduce *
    ... expression{slot.allowedValues+=#}** ...
    [prop. 6] * -> +
    ... expression{slot.allowedValues+=#}+* ...
    [prop. 15] A+ -> A A+
    ... ( expression{slot.allowedValues+=#} expression{slot.allowedValues+=#}+)* ...
!!!!! BAD THING! We address annotations directly (
    [5.3] {A} -> {A?!}
    ... ( expression{slot.?!allowedValues+=#} expression{slot.allowedValues+=#}+)* ...
    [4.1 + ...] before, after
	...
	  ('(' 'type' type{slot.?!type=#} ')')*{slot.?type=#}
      ('(' 'default' expression{slot.?!default=#} ')')*
      ('(' 'default-dynamic' expression{slot.?!defaultDynamic=#} ')')*
      ('(' 'allowed-values' expression{slot.?!allowedValues+=#} expression{slot.allowedValues+=#}+ ')')*
	[prop 10.] join into alt
	... (
	  ('(' 'type' type{slot.?!type=#} ')'){slot.?type=#} |
      ('(' 'default' expression{slot.?!default=#} ')') |
      ('(' 'default-dynamic' expression{slot.?!defaultDynamic=#} ')') |
      ('(' 'allowed-values' expression{slot.?!allowedValues+=#} expression{slot.allowedValues+=#}+ ')')
    )* ...
    // add ?
    // add 'declare'
	
}

deftemplate
	: nonVariableSymbol{template.name=#} 
	  STRING{template.comment=#}?
	  defmodule{template.module=#}
	  deftemplate{template.super=#}?
	  boolean{template.slotSpecific=#}?
      boolean(template.backchainReactive=#}?
      nonVariableSymbol{template.fromClass=#}?
      boolean{template.includeVariables=#}? 
      slot{template.slots+=#}*
	;
:: {
	[4.1 + ...] 
	... '(' 'ordered' TRUE ')' | '(' 'ordered' FALSE ')' ...
	... slot{template.slots+=#}? slot{template.slots+=#}* ...
	... orT sl? sl* | orF sl? sl* ...
	... orT sl? | orF sl* ...
	... orT sl | orf sl* ...
	... orT \e {__data} | orf sl* ...
	now we have two alternatives: for ordered and unordered sets :)
	
	---
	
	[4.4] defmodule {synth scope TEMPLATES: nonVariableSymbol -> Template}
	[4.4] defmodule {synth scope THIS_MODULE: Template}
	[4.4] deftemplate {inherit scope TEMPLATES = defmodule::TEMPLATES}
	[4.4] deftemplate {inherit scope THIS_MODULE = defmodule::THIS_MODULE}
	[4.4] introduce key
    ... (nonVariableSymbol{key in MODULES}{template.module=#})?{template.module=THIS_MODULE()} ...
    
	[4.4] deftemplate{template.super=#}?
	... (nonVariableSymbol{$M = MODULES(#)} '::' nonVariableSymbol{$T = #})
		{$M(T)}
		{template.super=#}    

	... (
			(nonVariableSymbol{$M = MODULES(#)})?
				{? $M = THIS_MODULE()}
			'::' 
			nonVariableSymbol{$T = #}
		)
		{$M.TEMPLATES(T)}
		{template.super=#}    
	
	
	[4.1 + ...] before after
	representReference(defmodule&, $module=nonVariableSymbol -- key in MODULES)
	$module.after = '::'
	extract(topLevelName: $module '::' nonVariableSymbol)
	$super.before = 'extends'
	representReference($super, 
		$superModule=nonVariableSymbol -- key in MODULES
		$superName=nonVariableSymbol -- key in $superModule::TEMPLATES)
	$superName.before = '::'
	move(STRING?, slotSpecific?.before)
	$declarations = mergeIntoAlternative(...)
	replaceIteration(?, $declarations)
	::$declarations == $body?
	extract(templateDeclarations: $body)
}