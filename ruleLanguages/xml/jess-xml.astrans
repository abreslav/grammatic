program
	: statement*
	;
:: {
	before = '<rulebase' ... '>'
	extract
	after = '</ruelbase' '>'
	extract
}

statement
	: expression
	: defmodule
	: defglobal
	: deftemplate
	: defrule
	: defquery
	: deffacts
	: deffunction
	;

expression // ???
	: variable
	: nonVariableSymbol
	: number
	: STRING
	: dottedVariable
	: functionCall
	;
:: {
	variable.before
	variable.after
	...
	:: expression : functionCall : $rest={...};
	extract(value: $rest)
}

namedAndCommented
	: nonVariableSymbol STRING? 
	;
	
defmodule
	: namedAndCommented autoFocus?
	;
:: { 
	before
	after
	nonVariableSymbol.before
	nonVariableSymbol.after
	extract(simpleName: )
	STRING.before = startComment
	STRING.after = endComment
	STRING.changeLexicalForm = text /// !!! this is nontrivial!
	autoFocus.before = 
		startProperties 
			startProperty 
				startName 'auto-focus' endName
				startSymbolValue
	autoFocus.after = endSymbolValue endProperty endProperties
	
}


	
defglobal
	: GLOBAL_VARIABLE expression
	;
 
slotKind
	: 'slot'
	: 'multislot'
	;
	
slot
	: slotKind nonVariableSymbol // check for dot absence in the name
	  $declarations=(slotType*
      default*
      defaultDynamic*
      allowedValues*)
    ;
:: {
	duplicateProduction($a, $b)
	$a::slotKind.instead = 'slot' // this is an enum value!!! 
	// it can be replaced while in ENUM by startSlot and endSlot can be added as meaningless token
	// on the other hand, if we need different classes, we have to present two nonterminals
	// in XSD they have two elements of the same type... 
	$b::slotKind.instead = 'multislot'
	...
}

moduleCitizen
	: namedAndCommented 
	  defmodule& 
	;

deftemplate
	: nonVariableSymbol 
	  STRING? 
	  defmodule&
	  ($super=deftemplate&)? // super
	  slotSpecific?
      backchainReactive?
      fromClass?
      includeVariables? 
      ordered?
      slot* // forbidden if declared ordered
	;
:: {
	before
	after
	representReference(defmodule&, $module=nonVariableSymbol -- key in MODULES)
	nonVariableSymbol.move = $module.after   
	$module.after = '::'
	STRING?.mode = nonVariableSymbol.after
	representReference($super, 
		$superModule=nonVariableSymbol -- key in MODULES
		$superName=nonVariableSymbol -- key in $superModule::TEMPLATES)
	...
	
}

defrule 
	: moduleCitizen
	  salience?
	  nodeIndexHash?
	  autoFocus?
	  noLoop?
	  conditionalElement*
	  functionCall* 
	;


defquery
	: moduleCitizen
	  variable*
	  nodeIndexHash?
	  maxBackgroundRules? 
	  conditionalElement* 
	;

deffacts
	: moduleCitizen
	  fact* 
	;

fact
	: deftemplate&
	  slotValue*
	;
	
slotValue
	: slot& expression
	;

deffunction
	: namedAndCommented
	  variable* 
	  MULTIFIELD? 
      expression* 
	;