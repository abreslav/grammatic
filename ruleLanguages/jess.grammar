#import {STRING, MULTIFIELD, GLOBAL_VARIABLE}, {nonVariableSymbol, topLevelName, functionCall, dottedVariable},
  {declarations :)};

// keywords are soft!!!
// Suport for (bind ?pt (new java.awt.Point))

program
	: statement*
	;

statement
	: expression
	: defmodule
	: defglobal
	: deftemplate
	: defrule
	: defquery
	: deffacts
	: deffunction
	;

expression
	: variable
	: nonVariableSymbol
	: number
	: STRING
	: dottedVariable
	: functionCall
	// NEGATIVE numbers are treated as numbers!
	// LISTS??? -- are handled specially by functions :( 
	;

defmodule
	: '(' 'defmodule' nonVariableSymbol
    	STRING?
    	moduleDeclarations?
      ')'	
	;
	
moduleDeclarations
	: '(' 'declare' autoFocus ')'
	;	


defglobal
	: '(' 'defglobal' (GLOBAL_VARIABLE '=' expression)+ ')'
	;


templateDeclarations
	: '(' 'declare' 
        (slotSpecific |
        backchainReactive |
        fromClass |
        includeVariables | 
        ordered)*
      ')'
	;
	
slotKind
	: 'slot' | 'multislot'
	;
	
slot
	: '(' slotKind nonVariableSymbol // check for dot absence in the name
         (slotType |
         default |
     	 defaultDynamic |
     	 allowedValues)*  
      ')'
    ;

deftemplate
	: '(' 
		'deftemplate' topLevelName
    	('extends' topLevelName)?
    	STRING?
    	templateDeclarations?
    	slot* // forbidden if declared ordered
      ')'
	;
	

ruleDeclarations
	: '(' 'declare' 
			(salience |
            nodeIndexHash |
            autoFocus |
            noLoop)*
      ')'
	;

defrule 
	: '(' 'defrule' topLevelName
    	STRING?
    	ruleDeclarations?
    	conditionalElement*
    	'=>'
    	functionCall* // it is a nonempty list! 
      ')'
	;


queryDeclarations
	: '(' 'declare' '(' 'variables' variable+ ')'
			nodeIndexHash?
        	maxBackgroundRules? 
      ')'
    ;

defquery
	: '(' 'defquery' topLevelName
    	STRING?
    	queryDeclarations?
    	conditionalElement* 
      ')'
	;

deffacts
	: '(' 'deffacts' topLevelName
		STRING?
    	functionCall* // fact is not a function call but it has the same syntactical form
    	              // if you count unordered facts 
      ')'
	;

deffunction
	: '(' 'deffunction' 
		nonVariableSymbol 
		STRING? 
		'(' variable* MULTIFIELD? ')' 
			// $? emits new on each occurrence
			// a multifield is not a special kind of variable. 
			// When a multifield $?list is matched, it's the variable ?list that receives the value.
		expression* 
	  ')'
	;