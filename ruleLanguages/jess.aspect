#global scope MODULES:
	nonVariableSymbol("MAIN") -> { // default value
		defmodule;
		RULES: nonVariableSymbol -> defrule;
		TEMPLATES: nonVariableSymbol -> deftemplate; 
	}; 
	
#global scope FUNCTIONS: nonVariableSymbol -> deffunction;

#global scope VARIABLES: VARIABLE("?" -> allocateNewUnnamedVariable());

#global scope GLOBAL_VARIABLES: GLOBAL_VARIABLE;

program
	: statement*
	;

statement
	: expression
	: defmodule
	: defglobal
	: deftemplate
	: defrule
	: defquery
	: deffacts
	: deffunction
	;

expression
	: variable
	: nonVariableSymbol
	: number
	: STRING
	: dottedVariable
	: functionCall
	// NEGATIVE numbers are treated as numbers!
	// LISTS??? -- are handled specially by functions :( 
	;
#PARAMETERS is inherited from deffunction (optional);
#variable is a reference in (PARAMETERS || VARIABLES); // sequential lookup

topLevelName
	: ($module=nonVariableSymbol '::')? $name=nonVariableSymbol
	;
#module is a key in MODULES;
#name is a key in (MODULES::RULES | MODULES::TEMPLATES);

defmodule
	: '(' 'defmodule' nonVariableSymbol
    	STRING?
    	moduleDeclarations?
      ')'	
	;
#contributes to MODULES; // implicit : find the only key and the only value

	
defglobal
	: '(' 'defglobal' (GLOBAL_VARIABLE '=' expression)+ ')'
	;
#contributes to GLOBAL_VARIABLES;

slot
 // check for dot absence in the name
	: '(' slotKind nonVariableSymbol
         (slotType |
         default |
     	 defaultDynamic |
     	 allowedValues)*  
      ')'
    ;
#SLOTS is inherited from deftemplate;
#contributes (nonVariableSymbol -> slot) to SLOTS;

deftemplate
	: '(' 
		'deftemplate' $this=topLevelName
    	('extends' $parent=topLevelName)?
    	STRING?
    	templateDeclarations?
    	slot* // forbidden if declared ordered
      ')'
	;
#parent is a reference in MODULES::TEMPLATES;
#contributes ($this -> deftemplate) to MODULES::TEMPLATES;
#synthesizes scope SLOTS: nonVariableSymbol -> slot;

defrule 
	: '(' 'defrule' topLevelName
    	STRING?
    	ruleDeclarations?
    	conditionalElement*
    	'=>'
    	functionCall*
      ')'
	;
#contributes (topLevelName -> defrule) to MODULE::RULES;

defquery
	: '(' 'defquery' topLevelName
    	STRING?
    	queryDeclarations?
    	conditionalElement* 
      ')'
	;
#contributes (topLevelName -> defquery) to MODULE::QUERIES;

deffacts
	: '(' 'deffacts' topLevelName
		STRING?
		fact* 
      ')'
	;
#contributes (topLevelName -> deffacts) to MODULE::FACTS;

fact
	: '(' topLevelName ('(' nonVariableSymbol expression ')' )* ')'
	: '(' topLevelName expression* ')' // ordered facts
	;
#topLevelName is a reference in MODULE::TEMPLATES;
#nonVariableSymbol is a reference in topLevelName::SLOTS;

deffunction
	: '(' 'deffunction' 
		nonVariableSymbol 
		STRING? 
		'(' variable* MULTIFIELD? ')' 
			// $? emits new on each occurrence
			// a multifield is not a special kind of variable. 
			// When a multifield $?list is matched, it's the variable ?list that receives the value.
		expression* 
	  ')'
	;
#contributes to FUNCTIONS;
#synthesizes scope PARAMETERS: variable;
#variable is a reference in GLOBAL_VARIABLES;
#contributes unresolved(variable) to PARAETERS;
#contributes strip$(MULTIFIELD) to PARAMETERS; // <-- problem


functionCall 
	: '(' nonVariableSymbol expression* ')'
	;
#nonVariableSymbol is a reference in FUNCITONS;
	