module grammar;

header {
import org.abreslav.grammar.*;
import org.abreslav.grammar.impl.*;
import java.util.*;
}

body {
    private final Map<String, ISymbol> symbols = new LinkedHashMap<String, ISymbol>();
    private final Map<SymbolReferenceImpl, String> references = new HashMap<SymbolReferenceImpl, String>();

    private void addSymbol(ISymbol symbol) {
        if (symbols.put(symbol.getName(), symbol) != null) {
            throw new IllegalArgumentException("Duplicate symbol: " + symbol.getName());
        }
    }

    private List<ISymbol> resolveReferences() {
        for (Map.Entry<SymbolReferenceImpl, String> entry : references.entrySet()) {
            ISymbol symbol = symbols.get(entry.getValue());
            if (symbol == null) {
                throw new IllegalArgumentException("Unresolved symbol: " + entry.getValue());
            }
            entry.getKey().setReferencedSymbol(symbol);
        }
        return new ArrayList<ISymbol>(symbols.values());
    }

    private static char toChar(String str) {
        if (str.length() == 1) {
            return str.charAt(0);
        }
        assert str.charAt(0) == '\\';
        switch (str.charAt(1)) {
            case '\\' : return '\\';
            case 'b'  : return '\b';
            case 't'  : return '\t';
            case 'n'  : return '\n';
            case 'f'  : return '\f';
            case 'r'  : return '\r';
            case '\'' : return '\'';
            case '\"' : return '\"';
            case 'u' : return hexToChar(str.substring(2, 6));
        }
        throw new IllegalStateException();
    }

    private static char hexToChar(String substring) {
        char result = 0;
        for (int i = 0; i < substring.length(); i++) {
            char c = substring.charAt(i);
            if (Character.isDigit(c)) {
                result = (char) (result * 16 + c - '0');
            } else if (Character.isUpperCase(c)) {
                result = (char) (result * 16 + c - 'A' + 10);
            } else {
                result = (char) (result * 16 + c - 'a' + 10);
            }
        }
        return result;
    }
}

footer { /*footer*/ }

option parser(org.abreslav.grammar.parser.Grammar);


public List<ISymbol> Grammar = Spacing Symbols EOF { yyValue = resolveReferences(); } ;
void Symbols = (Symbol+) ;
ISymbol Symbol = labels:Label* id:Identifier prods:(COLON Expression)+ SEMI {
  ISymbol symbol = new SymbolImpl(labels, id, new AlternativeImpl(prods));
  addSymbol(symbol);
  yyValue = symbol;
};

String Label = At Id Spacing;
void At = "@";

IExpression Expression
  = Alternative
  ;

IExpression Alternative
  = v1:Sequence rest:(OR Sequence)* {
    if (rest.isEmpty()) {
      yyValue = v1;
    } else {
      yyValue = new AlternativeImpl(v1, rest);
    }
  };

IExpression Sequence
  = v1:Iteration rest:Iteration* {
    if (rest.isEmpty()) {
      yyValue = v1;
    } else {
      yyValue = new SequenceImpl(v1, rest);
    }
  };

IExpression AtomicExpression
  = Empty
  / SymbolReference
  / Literal
  / CharacterRange
  / "(" Spacing v:Expression Spacing ")" Spacing { yyValue = v; }
  ;

IExpression Iteration
  = e:AtomicExpression Spacing "?" Spacing { yyValue = new OptionImpl(e); }
  / e:AtomicExpression Spacing "*" Spacing { yyValue = new RepetitionImpl(e, RepetitionKind.ZERO_OR_MORE); }
  / e:AtomicExpression Spacing "+" Spacing { yyValue = new RepetitionImpl(e, RepetitionKind.ONE_OR_MORE); }
  / AtomicExpression
  ;

ISymbolReference SymbolReference = id:Identifier {
  SymbolReferenceImpl impl = new SymbolReferenceImpl(null);
  yyValue = impl;
  references.put(impl, id);
};

IEmpty Empty = "empty":Id Spacing { yyValue = EmptyImpl.INSTANCE; };
ILiteral Literal = str:StringLiteral Spacing { yyValue = new LiteralImpl(str);} ;
ICharacterRange CharacterRange
  = neg:NEGATE? ch:CharacterLit {
        yyValue = new CharacterRangeImpl(neg != null, toChar(ch), toChar(ch));
      }
  /  LBRACKET neg:NEGATE? from:CharacterLit MINUS to:CharacterLit RBRACKET {
    yyValue = new CharacterRangeImpl(neg != null, toChar(from), toChar(to));
  }
  ;

void LBRACKET = "[" Spacing;
void RBRACKET = "]" Spacing;
String NEGATE = "!" Spacing;
void COLON = ":" Spacing;
void SEMI = ";" Spacing;
void OR = "|" Spacing;
void MINUS = "-" Spacing;

String Identifier    = Id Spacing ;
String Id            = [a-zA-Z_] [a-zA-Z0-9_]* ;

void Spacing       = (Space / SLComment / MLComment)* ;
void FSpacing      = (Space / SLComment / MLComment)+ ;
void Space         = ' ' / '\t' / '\f' / EOL ;
void SLComment     = "//" (![\n\r] _)* (EOL / EOF) ;
void MLComment     = "/*" ('*' !'/' / !'*' _)* "*/" ;
void EOL           = '\r' '\n' / '\r' / '\n';
void EOF           = !_ ;


String CharacterLit = CharacterLiteral Spacing;

String CharacterLiteral = ['] v:CharContents  ['] {yyValue = v;};
String CharContents = ( EscapeSequence / !['\\] _ );
String StringLiteral    = ["] v:StringContents ["] {yyValue = v;};
String StringContents = ( EscapeSequence / !["\\] _ )*;
String ClassChar        = EscapeSequence / ![\\\-\]] _ ;

transient String EscapeSequence =
   '\\' [btnfr"'\-\[\\\]] / UnicodeEscape / OctalEscape
   ;

transient String UnicodeEscape = '\\' 'u' HexQuad ;

transient String OctalEscape =
   '\\' [0-3] OctalDigit OctalDigit
   / '\\' OctalDigit OctalDigit
   / '\\' OctalDigit
   ;

String IntegerLiteral = HexNumeral / OctalNumeral / DecimalNumeral ;

transient String HexNumeral     = '0' [xX] HexDigit+ ;
transient String HexQuad        = HexDigit HexDigit HexDigit HexDigit ;
transient String HexDigit       = [0-9a-fA-F] ;
transient String OctalNumeral   = '0' OctalDigit+ ;
transient String OctalDigit     = [0-7] ;
transient String DecimalNumeral = '0' / NonZeroDigit Digit* ;
transient String NonZeroDigit   = [1-9] ;
transient String Digit          = [0-9] ;