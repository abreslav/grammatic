group Pools;

main(imports, provider, moduleBaseNames) ::= <<
package <provider.poolsClass.package>;

import java.util.ArrayList;
import java.util.List;

<imports:{import <it>;<\n>}>

public class <provider.poolsClass.name> implements <provider.providerInterface.name> {

	private static final int MAX_POOL_SIZE = 9;

	private final <provider.providerInterface.name> myModuleImplementationProvider;
<moduleBaseNames:{
	private List\<I<it>\> my<it>Pool;}
>

	public <provider.poolsClass.name>(
			<provider.providerInterface.name> moduleImplementationProvider) {
		myModuleImplementationProvider = moduleImplementationProvider;
	}

<moduleBaseNames:{<implementationSupport(it)>}>
}
>>

implementationSupport(basicName) ::= <<
	private final List\<I<basicName>\> get<basicName>Pool() {
		if (my<basicName>Pool == null) {
			my<basicName>Pool = new ArrayList\<I<basicName>\>();
		}
		return my<basicName>Pool;
	}
	
	public final I<basicName> get<basicName>() {
		List\<I<basicName>\> pool = get<basicName>Pool();
		if (pool.isEmpty()) {
			return myModuleImplementationProvider.get<basicName>();
		}
		return pool.remove(pool.size() - 1); 
	}
	
	public final void release<basicName>(I<basicName> builder) {
		//builder.release();
		List\<I<basicName>\> pool = get<basicName>Pool();
		if (pool.size() \< MAX_POOL_SIZE) {
			pool.add(builder);
		}
	}
	
>>